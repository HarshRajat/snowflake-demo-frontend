import React from 'react'
import DialogTitle from '@material-ui/core/DialogTitle';
import Dialog from '@material-ui/core/Dialog';
import Button from '@material-ui/core/Button';
import Typography from '@material-ui/core/Typography';
import { makeStyles } from '@material-ui/styles';
import { useWeb3Context } from 'web3-react'
import { CopyToClipboard } from 'react-copy-to-clipboard'

import { getEtherscanLink } from '../utilities'

const useStyles = makeStyles({
  centered: {
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    margin: '1em',
    overflowY: 'scroll',
  },
  spacer: {
    marginBottom: '1em',
    textAlign: 'center'
  },
  DAI: {
    color: '#ffce45 !important'
  },
  HYDRO: {
    color: '#0971F5 !important'
  },
  width: {
    width: '70%'
  }
})

export default function SettingsModal ({
  wallet, creationTransactionHash, resetDemo, open, onClose
}) {
  const classes = useStyles()
  const context = useWeb3Context()

  return (
    <Dialog open={open} onClose={onClose} fullWidth maxWidth='md'>
      <div className={classes.centered}>

        <DialogTitle align='center'>Summary</DialogTitle>

        <div className={classes.width}>
          <Typography variant='body1' align='left' paragraph={true}>
            Thank you for taking part in this demo! If you're curious about the specifics of how it all works, you're in the right place. Your <a href='https://github.com/cyphercodes96/Hydro-Snowflake-Identicon-Generator' target='_blank' rel='noopener noreferrer'>Snowflake avatar</a> is derived from a public Ethereum address, the private key to which was generated by the site and is saved in local storage (for an idea of why this might not be the best idea outside of a demo setting, see <a href='https://medium.com/mycrypto/the-unintended-consequences-of-product-design-d35fcdfe777d' target='_blank' rel='noopener noreferrer'>this talk by MyCrypto founder Taylor Monahan</a>). Drawbacks aside, this pattern makes it easy to use a meta-transaction to create a persistent, on-chain user identity while abstracting away gas costs. User identities are created using the <a href='https://erc1484.org/' target='_blank' rel='noopener noreferrer'>ERC1484 framework</a>, which is where your EIN, or Ethereum Identification Number, comes from. All ongoing transactions are funneled through a <a href='https://github.com/NoahHydro/snowflake-demo-smart-contracts' target='_blank' rel='noopener noreferrer'>Resolver built specifically for this demo</a>. The code for this front-end is <a href='https://github.com/NoahHydro/snowflake-demo-frontend' target='_blank' rel='noopener noreferrer'>available on Github</a>. If you'd like to give us feedback on this demo, you may <a href='https://docs.google.com/forms/d/1BSGd3whDXcYOIz8iNXlOlDLAwDglrttW970mPX4prCE' target='_blank' rel='noopener noreferrer'>do so here</a>.
          </Typography>
        </div>

        <DialogTitle align='center'>Settings</DialogTitle>

        <div className={classes.spacer}>
          <CopyToClipboard text={wallet.privateKey}>
            <Button color='secondary' variant='contained'>
              Copy Private Key
            </Button>
          </CopyToClipboard>
        </div>

        <div className={classes.spacer}>
          <Button
            component='a'
            href={getEtherscanLink(context.networkId, 'transaction', creationTransactionHash)} target='_blank'
            color='secondary' variant='contained'
          >
            View Creation Transaction
          </Button>
        </div>

        <div className={classes.spacer}>
          <Button color='secondary' variant='contained' onClick={resetDemo}>Reset Demo</Button>
        </div>

      </div>
    </Dialog>
  )
}
